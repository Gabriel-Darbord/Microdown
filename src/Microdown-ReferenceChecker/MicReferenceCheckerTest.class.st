Class {
	#name : 'MicReferenceCheckerTest',
	#superclass : 'TestCase',
	#category : 'Microdown-ReferenceChecker',
	#package : 'Microdown-ReferenceChecker'
}

{ #category : 'tests' }
MicReferenceCheckerTest >> testAllReferencesAreCorrect [

	| doc visitor |
	doc := Microdown parse:	'# Section 1
@anchorSection1

See *@anchorSection1@*

'.
	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self assert: visitor isOk.
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testAllReferencesAreCorrectInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 1
@anchorSection1

See *@anchorSection1@*

' ] .
	
	doc := Microdown parseFile: file contents .

	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .

	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self assert: visitor isOk.
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAFigure [

	| doc visitor |
	doc := Microdown parse: '# Section 1
![alittle caption.](figures/f.png anchor=anchorSection1)

See *@anchorSection1@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self assert: visitor isOk
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAFigureInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 1
![alittle caption.](figures/f.png anchor=anchorSection1)

See *@anchorSection1@*

' ] .
	
	doc := Microdown parseFile: file contents .

	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .

	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self assert: visitor isOk.
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAMathEquation [

	| doc visitor |
	doc := Microdown parse: '# Section 1
	
$$ %anchor=anchorSection1
balbalbalb! 
$$
See *@anchorSection1@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self assert: visitor isOk
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAMathEquationInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 1
	
$$ %anchor=anchorSection1
balbalbalb! 
$$
See *@anchorSection1@*

' ] .
	
	doc := Microdown parseFile: file contents .

	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .

	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self assert: visitor isOk.
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAnUknownAnchor [

	| doc visitor |
	doc := Microdown parse: '# Section 1

See *@anchorSection1@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self deny: visitor isOk
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReferToAnUknownAnchorInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 1

See *@anchorSection1@*

' ] .
	
	doc := Microdown parseFile: file contents .
	
	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .
	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self deny: visitor isOk.
]

{ #category : 'tests - duplicated anchors' }
MicReferenceCheckerTest >> testReportingDuplicatedAnchors [

	| doc visitor |
	doc := Microdown parse: '# Section 
@anchorSection0

# Section 1
@anchorSection1

# Section 2
@anchorSection1

# Section 3
@anchorSection1

See *@anchorSection1@* and *@anchorSection0@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self deny: visitor isOk.
	self assert: visitor duplicatedAnchors equals: OrderedCollection <- #('anchorSection1' 'anchorSection1')
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReportingDuplicatedAnchorsInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 
@anchorSection0

# Section 1
@anchorSection1

# Section 2
@anchorSection1

# Section 3
@anchorSection1

See *@anchorSection1@* and *@anchorSection0@*

'] .
	
	doc := Microdown parseFile: file contents .
	
	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .
	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
	self deny: visitor isOk.
	self assert: visitor duplicatedAnchors equals: OrderedCollection <- #('anchorSection1' 'anchorSection1')
]

{ #category : 'tests - duplicated anchors' }
MicReferenceCheckerTest >> testReportingDuplicatedFigures [

	| doc visitor |
	doc := Microdown parse: '# Section 
@anchorSection0

![a caption 1](figures/f.png anchor=anchorSection1)

![a caption 2](figures/f.png anchor=anchorSection1)

![a caption 3](figures/f.png anchor=anchorSection2)

See *@anchorSection1@* and *@anchorSection3@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self deny: visitor isOk.
	self
		assert: visitor duplicatedAnchors
		equals: OrderedCollection <- #( 'anchorSection1' )
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReportingDuplicatedFiguresInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 
@anchorSection0

![a caption 1](figures/f.png anchor=anchorSection1)

![a caption 2](figures/f.png anchor=anchorSection1)

![a caption 3](figures/f.png anchor=anchorSection2)

See *@anchorSection1@* and *@anchorSection3@*

'] .
	
	doc := Microdown parseFile: file contents .
	
	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .
	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
self deny: visitor isOk.
	self
		assert: visitor duplicatedAnchors
		equals: OrderedCollection <- #( 'anchorSection1' )
]

{ #category : 'tests - duplicated anchors' }
MicReferenceCheckerTest >> testReportingDuplicatedMaths [

	| doc visitor |
	doc := Microdown parse: '# Section 
@anchorSection0

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection3
balbalbalb! 
$$

See *@anchorSection1@* and *@anchorSection3@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self deny: visitor isOk.
	self
		assert: visitor duplicatedAnchors
		equals: OrderedCollection <- #( 'anchorSection1' 'anchorSection1' )
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReportingDuplicatedMathsInFile [ 

	| file doc visitor |
	file := (FileSystem workingDirectory / 'myFile.txt') asFileReference.
   file ensureCreateFile.


	
	file writeStreamDo: [ :stream | stream nextPutAll: '# Section 
@anchorSection0

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection1
balbalbalb! 
$$

$$ %anchor=anchorSection3
balbalbalb! 
$$

See *@anchorSection1@* and *@anchorSection3@*

'] .
	
	doc := Microdown parseFile: file contents .
	
	self assert: (doc isKindOf: MicRootBlock ) .
   self assert: doc fromFile equals: file contents .
	file ensureDelete .
	visitor := MicReferenceChecker new. 
	doc accept: visitor. 
   self deny: visitor isOk.
	self
		assert: visitor duplicatedAnchors
		equals: OrderedCollection <- #( 'anchorSection1' 'anchorSection1' )
]

{ #category : 'tests' }
MicReferenceCheckerTest >> testReportingUnknownAnchor [

	| doc visitor |
	doc := Microdown parse: '# Section 
@anchorSection0

# Section 1
@anchorSection1

See *@anchorSection1@* and *@anchorSection2@*

'.
	visitor := MicReferenceChecker new.
	doc accept: visitor.
	self deny: visitor isOk.
	self assert: visitor unknownAnchors equals: (OrderedCollection <- #('anchorSection2'))  
]
